{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12600\viewh14520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 README:\
\
This file contains:\
1) Descriptions of the Java packages used by the matcher.\
2) Comments on building the matcher into a larger speech recognition system\
3) Comments on collecting data with the matcher\
\
\

\b 1) Java Packages \

\b0 	The source code (and other resources) are divided into seven packages:\
	datastructures - Contains data structures for representing feature sets (also known as feature vectors or feature bundles), lexicons, and several internal structures used by the matcher.\
	matcher - Contains code for performing the matching.  This includes code for generating the CMU Lexicon from cmudict.* file, and code for generating a lexical tree from a lexicon.\
	english - Contains text files that will provide data for the matcher to use-- either as lexicons or as test sentences.\
	laff - Contains code for generating machine-usable data from the source LAFF files in the "english" package.\
	timit - Contains code for generating machine-usable data from the source TIMIT files in the "english" package.\
	resultevaluation - Contains data structures for aggregating the results of tests.  (For example, a program that ran matchings using various functions to calculate the similarity between two FeatureSets, and reported which functions gave the most accurate matchings, might use classes from this package.\
	datacollection - Contains programs that run the matcher on various inputs, and report the results.  BasicDemo.java and DeletionInsertionDemo.java simply show that the matcher is working.  PerfectStats.java reports how well the matcher could perform on the LAFF sentences, assuming all landmarks were detected perfectly, given varying thresholds for how strictly it should match.  (PerfectStats.java gives an idea for how well we can expect the matcher to work when we're only fighting against the inherent limitations of the landmark/distinctive features model, and not against signal processing difficulties.) SingleFeatureStats reports how well the matcher could perform on the LAFF sentences, when numerous matches are performed, ignoring a different feature when performing each set of matches on the data.  SingleFeatureStats gives an indication of how important different features are in the matching process.\
\

\b 2) Building on the Matcher\

\b0 	I'll provide brief instructions for building upon this code in Eclipse, since that's the IDE that we agreed that all/most contributors would use.  To open the project in Eclipse, choose File > New\'85 and select Java Project and click Next.  Enter "LexicalMatcher" as the Project name, then uncheck "Use default location" and in Location enter the location of the source folder and click Finish.  Eclipse will automatically import these files to your new project.  (Alternatively, the matcher could be imported into an existing project using File > Import\'85)\
	Code that interacts with the Matcher will need to used some of the data structures implemented in the datastructures package.  Specifically, the matcher takes in sequences of FeatureSets, and outputs Matchings.  Refer to the Javadocs for more information about these datastructures.\
\

\b 3) Collecting Data with the Matcher\

\b0 Since the matcher is expected to be run as part of a much larger system, it was not compiled into a separate command line tool.  So, to run any data collection program, it is best to open the project in Eclipse (see section 2).  PerfectStats.java is a sample data collection program, which was developed for researching how well the matcher can be expected to work given the inherent limitations of the landmark/distinctive features model.\
PerfectStats outputs its results to a file: you must provide the desired output file path in the Arguments tab of the Run Configurations dialog (Run menu > Run Configurations\'85).  Running perfect stats will then output the results in textual format in that file.  If you wish to view the results in Excel, use the txtToCSV.py python script.  For example, to convert the output of a PerfectStats run (which uses 'threshold' as the independent variable), run `python txtToCSV.py threshold Path/To/PerfectStats/Output Path/To/Store/Resulting/Excel/File`. (Run `python txtToCSV.py` for more information.)}